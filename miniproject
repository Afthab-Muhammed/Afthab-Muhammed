import numpy as np
import matplotlib.pyplot as plt
from skimage import color
from skimage.io import imsave, imread
from tkinter import Tk, filedialog


def encrypt_image(image, key):
    """Encrypt the grayscale image using XOR with a pseudo-random matrix."""
    np.random.seed(key)
    random_matrix = np.random.randint(0, 256, image.shape, dtype=np.uint8)
    encrypted_image = np.bitwise_xor(image, random_matrix)
    return encrypted_image


def decrypt_image(encrypted_image, random_matrix):
    """Decrypt the image using the same pseudo-random matrix."""
    decrypted_image = np.bitwise_xor(encrypted_image, random_matrix)
    return decrypted_image


def embed_data(image, data, block_size=4):
    """Embed binary data into the encrypted image using Pixel Shifting Approach (PSA)."""
    embedded_image = image.copy()
    rows, cols = image.shape
    data_index = 0
    shift_pattern = []  # Track the shift amount for each block

    # Add a synchronization marker at the start (e.g., "1111")
    sync_marker = "1111"
    data = sync_marker + data

    for i in range(0, rows, block_size):
        for j in range(0, cols, block_size):
            block = embedded_image[i:i + block_size, j:j + block_size].flatten()
            if block.size != block_size * block_size:
                continue  # Skip incomplete blocks
            if data_index + 4 <= len(data):  # Embed 4 bits per block
                shift_amount = int(data[data_index:data_index + 4], 2)
                block = np.roll(block, shift_amount)
                shift_pattern.append(shift_amount)  # Store the shift amount used
                data_index += 4
            embedded_image[i:i + block_size, j:j + block_size] = block.reshape((block_size, block_size))
    
    return embedded_image, shift_pattern


def extract_data(image, random_matrix, shift_pattern, block_size=4, expected_data_length=None):
    """Extract hidden data from the image using Pixel Shifting Approach (PSA)."""
    extracted_data = []
    restored_image = image.copy()
    rows, cols = image.shape
    bits_extracted = 0
    sync_marker = "1111"  # Synchronization marker to detect the start of hidden data
    found_sync_marker = False

    for i in range(0, rows, block_size):
        for j in range(0, cols, block_size):
            block = restored_image[i:i + block_size, j:j + block_size].flatten()
            if block.size != block_size * block_size:
                continue  # Skip incomplete blocks

            # Get the corresponding shift value for this block
            shift = shift_pattern.pop(0)

            # Restore the block to its original form by reversing the shift
            block = np.roll(block, -shift)
            restored_image[i:i + block_size, j:j + block_size] = block.reshape((block_size, block_size))

            # Extract the bits corresponding to the shift
            extracted_bits = f"{shift:04b}"
            extracted_data.append(extracted_bits)
            bits_extracted += 4

            if bits_extracted >= expected_data_length + 4:  # Including sync marker bits
                break

        if bits_extracted >= expected_data_length + 4:
            break

    if len(extracted_data) > 0:
        # Join and remove the synchronization marker
        extracted_bits = "".join(extracted_data)
        start_index = extracted_bits.index(sync_marker) + len(sync_marker)
        return extracted_bits[start_index:start_index + expected_data_length], restored_image
    else:
        print("Synchronization marker not found. Data extraction failed.")
        return None, restored_image


# Example Usage
if __name__ == "__main__":
    choice = input("Which operation do you wish to perform? encryption or decryption : ")
    if choice == "encryption":
        # Load and preprocess the image
        Tk().withdraw()
        file_path = filedialog.askopenfilename(title="Select an Image",filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff")])
        if not file_path:
            print("No file selected. Exiting.")
            exit()

        original_image = imread(file_path)
        if len(original_image.shape) == 3:
            original_image = color.rgb2gray(original_image) * 255
        original_image = original_image.astype(np.uint8)

        # Encryption
        key = int(input("Enter a key for encryption (3 digit) : "))
        encrypted_image = encrypt_image(original_image, key)

        # Data to hide
        hidden_data = input("Enter data to hide : ")
        binary_data = ''.join(format(ord(char), '08b') for char in hidden_data)

        # Embed data
        marked_image, shift_pattern = embed_data(encrypted_image, binary_data, block_size=4)
        private_key = shift_pattern
        private_key.append(len(binary_data))
        private_key.append(key)
        imsave(r"C:\Users\aftha\OneDrive\Desktop\Afthab\Python\afthab\miniproject\Images\marked_image.png", marked_image)
        np.save(r"C:\Users\aftha\OneDrive\Desktop\Afthab\Python\afthab\miniproject\Images\private_key.npy",private_key)

        # Plot and save the images
        plt.figure(figsize=(15, 10))

        plt.subplot(1, 3, 1)
        plt.title("Original Image")
        plt.imshow(original_image, cmap="gray")
        plt.axis("off")

        plt.subplot(1, 3, 2)
        plt.title("Encrypted Image")
        plt.imshow(encrypted_image, cmap="gray")
        plt.axis("off")

        plt.subplot(1, 3, 3)
        plt.title("Marked Image (Data Embedded)")
        plt.imshow(marked_image, cmap="gray")
        plt.axis("off")

        plt.tight_layout()
        plt.show()


    elif choice == "decryption":
        file_path = filedialog.askopenfilename(title="Select an Image",filetypes=[("Marked Image", "*.png;*.jpg;*.jpeg;*.bmp;*.tiff")])
        if not file_path:
            print("No file selected. Exiting.")
            exit()

        marked_image = imread(file_path)

        file_path = filedialog.askopenfilename(title="Select an Image",filetypes=[("Private Key", "*.npy;*")])
        if not file_path:
            print("No file selected. Exiting.")
            exit()

        private_key = np.load(file_path)

        # Generate random matrix
        np.random.seed(private_key[len(private_key) - 1])
        random_matrix = np.random.randint(0, 256, marked_image.shape, dtype=np.uint8)

        shift_pattern = private_key[0:len(private_key)-2].tolist()

        # Extract data
        extracted_binary_data, restored_image = extract_data(marked_image, random_matrix, shift_pattern, block_size=4, expected_data_length=private_key[len(private_key) - 2])

        extracted_data = ''.join(chr(int(extracted_binary_data[i:i+8], 2)) for i in range(0, len(extracted_binary_data), 8))

        # Decrypt image
        decrypted_image = decrypt_image(restored_image, random_matrix)

        # Display results
        print(f"Extracted Data: {extracted_data}")

        plt.figure(figsize=(15, 5))

        plt.subplot(1, 3, 1)
        plt.title("Marked Image (Data Embedded)")
        plt.imshow(marked_image, cmap="gray")
        plt.axis("off")

        plt.subplot(1, 3, 2)
        plt.title("Restored Image")
        plt.imshow(restored_image, cmap="gray")
        plt.axis("off")

        plt.subplot(1, 3, 3)
        plt.title("Decrypted Image")
        plt.imshow(decrypted_image, cmap="gray")
        plt.axis("off")

        plt.tight_layout()
        plt.show()
